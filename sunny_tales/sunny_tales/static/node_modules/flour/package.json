{
  "name": "flour",
  "version": "0.5.0",
  "description": "Cakefile build tools.",
  "main": "flour.coffee",
  "dependencies": {
    "colors": "*",
    "hound": "*",
    "minimatch": "*"
  },
  "devDependencies": {
    "mocha": "*",
    "should": "*",
    "uglify-js": ">2.0",
    "jshint": "*",
    "coffee-script": "*",
    "less": "*",
    "stylus": "*",
    "nib": "*",
    "csso": "*",
    "handlebars": "*"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/ricardobeat/cake-flour.git"
  },
  "keywords": [
    "cakefile",
    "cake",
    "task",
    "build",
    "bundle",
    "tools",
    "watch",
    "compile",
    "coffee-script",
    "minify",
    "uglify",
    "grunt",
    "assets",
    "make",
    "jake",
    "async"
  ],
  "scripts": {
    "test": "mocha"
  },
  "author": {
    "name": "Ricardo Tomasi",
    "email": "ricardobeat@gmail.com"
  },
  "license": "MIT (ricardo.mit-license.org)",
  "readme": "Flour\n==========\n\n[![NPM version](https://badge.fury.io/js/flour.png)](http://badge.fury.io/js/flour)\n\n**Flour** is a set of simple build tools for your Cakefiles.\n\n[Changelog](#changelog)\n\n![image](http://i.imgur.com/yIxF9.jpg)\n\n## Usage\n\nAdd `flour` and your required pre-processors/compilers to your `package.json`:\n\n    {\n      \"name\": \"dancingrobot\",\n      ...\n      \"dependencies\": {\n        \"flour\": \"\",\n        \"uglify-js\": \"\",\n        \"coffee-script\": \"\"\n      },\n      ...\n    }\n\nThen run `npm install`, and `require 'flour'` at the top of your Cakefile. A few methods are available in the global scope.\n\nThis is what a typical Cakefile could look like:\n\n    require 'flour'\n\n    task 'build:coffee', ->\n        compile 'coffee/app.coffee', 'js/app.js'\n\n    task 'build:less', ->\n        compile 'less/main.less', 'css/main.css'\n\n    task 'build:plugins', ->\n        bundle [\n            'vendor/underscore.js'\n            'vendor/hogan.js'\n            'vendor/backbone.js'\n        ], 'js/plugins.js'\n\n    task 'build', ->\n        invoke 'build:plugins'\n        invoke 'build:coffee'\n        invoke 'build:less\n\n    task 'watch', ->\n        invoke 'build:less'\n        invoke 'build:coffee'\n\n        watch 'less/*.less', -> invoke 'build:less'\n        watch 'coffee/app.coffee', -> invoke 'build:coffee'\n\n    task 'lint', 'Check javascript syntax', ->\n        lint 'js/feature.js'\n\n(if the global pollution hurts your feelings you can remove them with `flour.noConflict()`. That will bring the global object back to it's previous state)\n\nEach of these functions accepts either a file path or a list of files. Simple wildcard paths (`*.xxx`) are allowed. For example:\n\n    watch [\n        'less/main.less'\n        'less/reset.less'\n        'less/print.less'\n    ], -> invoke 'build:less'\n\nYou can also access the resulting output by passing a callback:\n\n    compile 'coffee/app.coffee', (output) ->\n        # do something with the compiled output\n        mail.send subject: 'Project file', to: 'grandma@hotmail.com', body: output\n\n    # verify the CoffeeScript compiler output\n    compile 'coffee/app.coffee', 'js/app.js', -> lint 'js/app.js'\n\n## Adapters\n\nThese are the current adapters and the required modules:\n\n### Compilers\n\n* CoffeeScript: `coffee-script`\n* LESS: `less`\n* Stylus: `stylus`\n\n### Minifiers\n\n* Javascript: `uglify-js`\n\n### Linters\n\n* Javascript: 'jshint'\n\nCreating new adapters is very easy, take a look at the `adapters/` folder for guidance.\n\n## Reference\n\n### Compile\n\nCompile CoffeeScript, LESS, Stylus, Handlebars templates:\n\n    compile(file, [destination], [callback])\n\n##### Usage\n\n    compile 'app.coffee', 'app.js'\n\n    compile 'cold.coffee', 'app.js', (output) ->\n        console.log 'Done!'\n\n    compile 'cold.coffee', (output) ->\n        console.log output.transform()\n\nSome compilers may accept options that will get proxied to their respective\nlibraries. For example, you can disable compression for LESS or Stylus with\n\n    flour.compilers.less.compress = false\n    flour.compilers.styl.compress = false\n\nOr customize the LESS include path with\n\n    flour.compilers.less.paths = ['/path/to/my/less/libs/']\n\n### Bundle\n\nCompile, minify and join a set of files:\n\n    bundle(files, destination)\n\n##### Usage\n\n    // preservers the list order\n    bundle [\n        'lib/jquery.js'\n        'lib/underscore.js'\n        'lib/backbone.js'\n    ], 'js/bundle.js'\n\n    // system-dependent order\n    bundle 'js/*.js', 'js/all.js'\n\n### Watch\n\nWatch files for changes:\n\n    watch(files, action)\n\n##### Usage\n\n    watch 'src/app.coffee', ->\n        compile 'lib/app.js'\n\n    # best used with predefined tasks:\n\n    task 'build', ->\n        bundle '*.coffee', 'app.js'\n\n    task 'watch', ->\n        watch [\n            'modules.coffee'\n            'user.coffee'\n            'main.coffee'\n        ], ->\n            invoke 'build'\n\n    # or simply\n    task 'watch', ->\n        watch '*.coffee', -> invoke 'build'\n\n### Lint\n\nCheck file syntax (uses [JSHint](http://jshint.com)):\n\n    lint(file, [options], [globals]) # see http://www.jshint.com/options/\n\n#### Usage\n\n    task 'lint', ->\n\n        lint 'scripts/*.js'\n\n### Minify\n\nMinify files (currently only Javascript using [UglifyJS](https://github.com/mishoo/UglifyJS)):\n\n    minify(file, [destination], [callback])\n\n## Extensibility\n\nYou can add new minifiers and compilers to `flour`:\n\n    flour.minifiers['dumb'] = (file, cb) ->\n        file.read (code) ->\n            cb code.replace(/\\s*/, '')\n\n    flour.compilers['odd'] = (file, cb) ->\n        odd = require 'odd-lib'\n        file.read (code) ->\n            cb odd.compile code\n\n## Tips\n\n#### Disable the JS minifier during development\n\n    task 'watch', ->\n        flour.minifiers.disable 'js'\n\n        watch 'scripts/*.coffee', -> invoke 'build'\n\n#### Pre-compile Hogan templates\n\n    flour.compilers['mustache'] = (file, cb) ->\n        hogan = require 'hogan.js'\n        file.read (code) ->\n            cb \"App.templates['#{file.base}']=${hogan.compile code, asString: true};\"\n\n    task 'build:templates', ->\n        bundle 'views/*.mustache', 'resources/views.js'\n\n## Why use flour?\n\nWhile Grunt, brewerjs, H5BP-build-script, Yeoman and other similar projects have the same (and some more advanced) capabilities, they are increasingly complex to setup.\n\nThe goal of Flour is to provide a small and simple API that caters for the most common build tasks, without requiring you to adjust your project structure, install command-line tools or create long configuration files.\n\n#### Changelog <a name=\"changelog\"></a>\n\n##### v0.4.12\n- flour.minifiers.disable('js'), enables/disables all if no argument given\n- compile handlebars *.hbs templates\n\n##### v0.4.12\n- expand paths containing patterns inside `bundle()` array argument (#22)\n\n##### v0.4.11\n- mkdir_p on compile (#20)\n\n##### v0.4.10\n- compatibility fix for CoffeeScript 1.5.0\n\n##### v0.4.9\n- fix lint callback arguments\n- **breaking change**: call callback only once when watching multiple files. each file is a key in the results object\n- add yuicompress option for LESS compiler\n\n##### v0.4.8\n- output to multiple files with `flour.compile 'src/*.coffee', '*'` and variations\n\n##### v0.4.5 / v0.4.6\n- handle single file path as input for bundle()\n- better handling of wildcard paths using [minimatch](http://github.com/isaacs/minimatch)\n\n##### v0.4.4\n- add back support for uglify-js < 2.0\n\n##### v0.4.0\n- tests!\n- fix file buffer bug\n- accept options for adapters, enables disabling compression for LESS and Stylus\n\n##### v0.3.3\n- bugfixes\n\n##### v0.3.2\n- add [node-hound](http://github.com/beefsack/node-hound) as a dependency for file watching\n- watch whole directory trees: `watch `src/`, -> invoke 'build' (listens for new files and deletes too)\n- fix error handlers leak\n\n##### v0.3.1\n- fix extension handling bug\n\n##### v0.3.0\n- flour doesn't install it's adapter dependencies anymore, it's up to you to add them to your project's `package.json`\n",
  "_id": "flour@0.5.0",
  "dist": {
    "shasum": "c5b3ade9ab3b1715357de0d5ae95c5b828caac6b"
  },
  "_from": "flour@0.5.0"
}
